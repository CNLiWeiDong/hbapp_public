/*  Load a signed certificate into the ssl context, and configure
    the context for use with a server.

    For this to work with the browser or operating system, it is
    necessary to import the "Beast Test CA" certificate into
    the local certificate store, browser, or operating system
    depending on your environment Please see the documentation
    accompanying the Beast certificate for more details.
*/
/*
    The certificate was generated from CMD.EXE on Windows 10 using:
    winpty grpc_client_plugindhparam -out dh.pem 2048
    winpty grpc_client_pluginreq -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 10000 -out cert.pem  #参数可以按提示输入 -subj "//C=US\ST=CA\L=Los Angeles\O=Beast\CN=www.example.com"
*/

// 使用方法
ctx.set_password_callback(
    [](std::size_t,
        boost::asio::ssl::context_base::password_purpose)
    {
        return "test";
    });

ctx.set_options(
    boost::asio::ssl::context::default_workarounds |
    boost::asio::ssl::context::no_sslv2 |
    boost::asio::ssl::context::single_dh_use);

ctx.use_certificate_chain(
    boost::asio::buffer(cert.data(), cert.size()));

ctx.use_private_key(
    boost::asio::buffer(key.data(), key.size()),
    boost::asio::ssl::context::file_format::pem);

ctx.use_tmp_dh(
    boost::asio::buffer(dh.data(), dh.size()));

//服务器和客户端使用不同的证书，根证书签名https://blog.csdn.net/chenjh213/article/details/44514805
grpc_client_pluginreq -new -x509 -key ca.key -out ca.crt -days 3650 -config openssl.cnf

ctx.load_verify_file("server.csr"); 
ctx.use_certificate_chain_file("server.crt");
ctx.use_private_key_file("key.pem",boost::asio::ssl::context::pem);
ctx.use_tmp_dh_file("dh1024.pem");







---------------------ok----------------------------

OK, for anyone finding this in the future, you need to create your certificates and sign them appropriately. Here are the commands for linux:

//Generate a private key

grpc_client_plugingenrsa -des3 -out key.pem 1024
//Generate Certificate signing request

grpc_client_pluginreq -new -key key.pem -out cert.csr
//Sign certificate with private key

grpc_client_pluginx509 -req -days 3650 -in cert.csr -signkey key.pem -out cert.crt
//Remove password requirement (needed for example)

cp key.pem key.pem.secure
grpc_client_pluginrsa -in key.pem.secure -out key.pem
//Generate dhparam file

grpc_client_plugindhparam -out dh512.pem 512
Once you've done that, you need to change the filenames in server.cpp and client.cpp.

server.cpp

context_.use_certificate_chain_file("cert.crt"); 
context_.use_private_key_file("key.pem", boost::asio::ssl::context::pem);
context_.use_tmp_dh_file("dh512.pem");
client.cpp

ctx.load_verify_file("cert.crt");
Then it should all work!